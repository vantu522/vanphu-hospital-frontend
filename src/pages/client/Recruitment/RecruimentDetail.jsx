import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";

export const getRecruitmentBySlug = async (slug) => {
  // T·∫°m th·ªùi gi·∫£ l·∫≠p b·∫±ng d·ªØ li·ªáu c·ª©ng
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        slug: "tuyen-dung-khoi-y-te-t7-2025",
        title: "Th√¥ng b√°o tuy·ªÉn d·ª•ng kh·ªëi Y t·∫ø T7/2025",
        deadline: "31-07-2025",
        position: "B√°c sƒ©",
        hospital: "B·ªánh vi·ªán A",
        level: "Tr∆∞·ªüng khoa",
        profession: "Y t·∫ø",
        // Th√™m field cho ·∫£nh c√¥ng vƒÉn
        documentImages: [
          "/api/uploads/cong-van-tuyen-dung-trang-1.jpg",
          "/api/uploads/cong-van-tuyen-dung-trang-2.jpg"
        ],
        // V·∫´n gi·ªØ content HTML ƒë·ªÉ fallback
        content: `
          <p>K√≠nh g·ª≠i Qu√Ω ·ª©ng vi√™n,</p>
          <p>Nh·∫±m ƒë√°p ·ª©ng nhu c·∫ßu nh√¢n l·ª±c cho c√°c c∆° s·ªü y t·∫ø tr·ª±c thu·ªôc, ch√∫ng t√¥i th√¥ng b√°o tuy·ªÉn d·ª•ng c√°c v·ªã tr√≠ l√†m vi·ªác t·∫°i b·ªánh vi·ªán v·ªõi th√¥ng tin nh∆∞ sau:</p>
          
          <h3>1. V·ªã tr√≠ tuy·ªÉn d·ª•ng:</h3>
          <ul>
            <li>B√°c sƒ© chuy√™n khoa N·ªôi</li>
            <li>B√°c sƒ© chuy√™n khoa Ngo·∫°i</li>
            <li>ƒêi·ªÅu d∆∞·ª°ng vi√™n</li>
          </ul>

          <h3>2. Y√™u c·∫ßu chung:</h3>
          <ul>
            <li>T·ªët nghi·ªáp ƒë·∫°i h·ªçc chuy√™n ng√†nh t∆∞∆°ng ·ª©ng</li>
            <li>C√≥ ch·ª©ng ch·ªâ h√†nh ngh·ªÅ theo quy ƒë·ªãnh</li>
            <li>K·ªπ nƒÉng giao ti·∫øp t·ªët, ch·ªãu ƒë∆∞·ª£c √°p l·ª±c</li>
          </ul>

          <h3>3. H·ªì s∆° d·ª± tuy·ªÉn bao g·ªìm:</h3>
          <ul>
            <li>ƒê∆°n xin vi·ªác</li>
            <li>S∆° y·∫øu l√Ω l·ªãch c√≥ x√°c nh·∫≠n</li>
            <li>B·∫±ng c·∫•p, ch·ª©ng ch·ªâ li√™n quan</li>
            <li>Gi·∫•y kh√°m s·ª©c kh·ªèe</li>
          </ul>

          <h3>4. H·∫°n n·ªôp h·ªì s∆°:</h3>
          <p><strong>31/07/2025</strong></p>

          <p>Tr√¢n tr·ªçng,</p>
          <p>Ph√≤ng T·ªï ch·ª©c Nh√¢n s·ª±</p>
        `
      });
    }, 500);
  });
};

const RecruitmentDetail = () => {
  const { slug } = useParams();
  const [recruitment, setRecruitment] = useState(null);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [imageError, setImageError] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    coverLetter: "",
  });

  useEffect(() => {
    const fetchRecruitment = async () => {
      try {
        const data = await getRecruitmentBySlug(slug);
        setRecruitment(data);
      } catch (err) {
        console.error("L·ªói khi t·∫£i chi ti·∫øt tuy·ªÉn d·ª•ng:", err);
      }
    };
    fetchRecruitment();
  }, [slug]);

  const handleSubmit = (e) => {
    e.preventDefault();
    alert("ƒê∆°n ·ª©ng tuy·ªÉn ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
    console.log(formData);
  };

  const handleImageError = () => {
    setImageError(true);
  };

  if (!recruitment) return <p className="p-10">ƒêang t·∫£i...</p>;

  return (
    <div className="max-w-7xl mx-auto px-4 py-10 grid md:grid-cols-10 gap-10">
      {/* C√¥ng vƒÉn tuy·ªÉn d·ª•ng */}
      <div className="md:col-span-7">
        <h1 className="text-3xl font-bold mb-4">{recruitment.title}</h1>
        <p className="text-gray-600 mb-6">
          üïí H·∫°n n·ªôp h·ªì s∆°:{" "}
          <span className="text-red-600 font-medium">{recruitment.deadline}</span>
        </p>
        <iframe
  src="http://localhost:5000/uploads/pdfs/1754393162227-662583004.pdf"
  width="100%"
  height="600px"
  title="PDF Viewer"
/>


        {/* Hi·ªÉn th·ªã ·∫£nh c√¥ng vƒÉn n·∫øu c√≥ */}
        {recruitment.documentImages && recruitment.documentImages.length > 0 && !imageError ? (
          <div className="space-y-6">
            {/* Navigation cho nhi·ªÅu trang */}
            {recruitment.documentImages.length > 1 && (
              <div className="flex items-center justify-center space-x-2 mb-4">
                {recruitment.documentImages.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImageIndex(index)}
                    className={`px-3 py-1 rounded text-sm ${
                      selectedImageIndex === index
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    Trang {index + 1}
                  </button>
                ))}
              </div>
            )}

            {/* Hi·ªÉn th·ªã ·∫£nh c√¥ng vƒÉn */}
            <div className="bg-white rounded-lg shadow-lg p-4">
              <img
                src={recruitment.documentImages[selectedImageIndex]}
                alt={`C√¥ng vƒÉn tuy·ªÉn d·ª•ng - Trang ${selectedImageIndex + 1}`}
                className="w-full max-w-4xl mx-auto rounded border shadow-sm"
                style={{
                  aspectRatio: '210/297', // T·ªâ l·ªá A4
                  objectFit: 'contain',
                  backgroundColor: '#f9f9f9'
                }}
                onError={handleImageError}
              />
              
              {/* Th√¥ng tin trang */}
              {recruitment.documentImages.length > 1 && (
                <p className="text-center text-gray-500 text-sm mt-2">
                  Trang {selectedImageIndex + 1} / {recruitment.documentImages.length}
                </p>
              )}
            </div>

            {/* ƒêi·ªÅu khi·ªÉn zoom v√† download */}
            <div className="flex justify-center space-x-4">
              <button
                onClick={() => window.open(recruitment.documentImages[selectedImageIndex], '_blank')}
                className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 flex items-center space-x-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
                </svg>
                <span>Xem chi ti·∫øt</span>
              </button>
              
              <a
                href={recruitment.documentImages[selectedImageIndex]}
                download={`cong-van-${recruitment.slug}-trang-${selectedImageIndex + 1}.jpg`}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex items-center space-x-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span>T·∫£i xu·ªëng</span>
              </a>
            </div>
          </div>
        ) : (
          // Fallback v·ªÅ HTML content n·∫øu kh√¥ng c√≥ ·∫£nh ho·∫∑c l·ªói load ·∫£nh
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div
              className="prose max-w-none"
              dangerouslySetInnerHTML={{ __html: recruitment.content }}
            />
            {imageError && (
              <p className="text-amber-600 text-sm mt-4 p-3 bg-amber-50 rounded">
                ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i ·∫£nh c√¥ng vƒÉn. ƒêang hi·ªÉn th·ªã n·ªôi dung d·∫°ng text.
              </p>
            )}
          </div>
        )}
      </div>

      {/* Form ·ª©ng tuy·ªÉn */}
      <div className="md:col-span-3 bg-white p-6 rounded-lg shadow-md h-fit sticky top-6">
        <h2 className="text-xl font-semibold mb-4">ƒêƒÉng k√Ω ·ª©ng tuy·ªÉn</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block font-medium mb-1">H·ªç t√™n</label>
            <input
              type="text"
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              required
            />
          </div>
          <div>
            <label className="block font-medium mb-1">Email</label>
            <input
              type="email"
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              required
            />
          </div>
          <div>
            <label className="block font-medium mb-1">S·ªë ƒëi·ªán tho·∫°i</label>
            <input
              type="tel"
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.phone}
              onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
              required
            />
          </div>
          <div>
            <label className="block font-medium mb-1">Th∆∞ ng·ªè</label>
            <textarea
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows="4"
              value={formData.coverLetter}
              onChange={(e) => setFormData({ ...formData, coverLetter: e.target.value })}
              placeholder="Chia s·∫ª v·ªÅ b·∫£n th√¢n v√† l√Ω do ·ª©ng tuy·ªÉn..."
            />
          </div>
          <button
            type="submit"
            className="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
          >
            G·ª≠i h·ªì s∆°
          </button>
        </form>
      </div>
    </div>
  );
};

export default RecruitmentDetail;